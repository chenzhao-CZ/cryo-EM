##############################################################################################
# Chen Zhao
# czhao@rockefeller.edu
# remove duplicated particles in a star file
# can deal with star files generated by both relion 3.1 and 3-
# python infile.star outfile.star (remove duplicated particles by image name and pose)
# python infile.star outfile.star --clean (remove duplicated particles by image name only)
##############################################################################################

import argparse

def unique(infileName, outfileName, clean):
	with open(infileName, 'r') as infile, open(outfileName, 'w') as outfile:
		for line in infile:
			outfile.write(line)
			if line.startswith('data_optics'):
				uniqueRelion31(infile, outfile, clean)
			elif line.startswith('data_'):
				uniqueRelion3(infile, outfile, clean)

def uniqueRelion31(infile, outfile, clean):
	headerParticles = {}
	headerCountParticles = 0
	particles = 0
	count = 0
	imgs = {}		# key: path to .mrcs, value: list of particles as a tuple (num, psi, rot, tilt)
	for line in infile:
		if not particles:
			outfile.write(line)
			if line.startswith('data_particles'):
				particles = 1
		else:
			if line.startswith('_rln'):
				headerCountParticles += 1
				entry = line.split(' ')
				headerParticles[entry[0]] = eval(entry[1][1:]) - 1
				outfile.write(line)
			elif line.strip() and headerCountParticles:
				items = line[:-1].split()
				path = items[headerParticles['_rlnImageName']].split('@')
				if not clean:
					particle = ( path[0], items[headerParticles['_rlnAnglePsi']], items[headerParticles['_rlnAngleRot']], items[headerParticles['_rlnAngleTilt']] ) 
				else:
					particle = path[0]
				if path[1] not in imgs.keys():
					count += 1
					imgs[path[1]] = [ particle ]
					print 'writing particle: ' + str(count)
					outfile.write(line)
				elif particle not in imgs[path[1]]:
					count += 1
					imgs[path[1]].append(particle)
					print 'writing particle: ' + str(count)
					outfile.write(line)
			else:
				outfile.write(line)

def uniqueRelion3(infile, outfile, clean):
	header = {}
	headerCountParticles = 0
	count = 0
	imgs = {}		# key: path to .mrcs, value: list of particles as a tuple (num, psi, rot, tilt)
	for line in infile:
		if line.startswith('_rln'):
			headerCountParticles += 1
			entry = line.split(' ')
			header[entry[0]] = eval(entry[1][1:]) - 1
			outfile.write(line)
		elif line.strip() and headerCountParticles:
			items = line[:-1].split()
			path = items[header['_rlnImageName']].split('@')
			if not clean:
				particle = ( path[0], items[header['_rlnAnglePsi']], items[header['_rlnAngleRot']], items[header['_rlnAngleTilt']] ) 
			else:
				particle = path[0]
			if path[1] not in imgs.keys():
				count += 1
				imgs[path[1]] = [ particle ]
				print 'writing particle: ' + str(count)
				outfile.write(line)
			elif particle not in imgs[path[1]]:
				count += 1
				imgs[path[1]].append(particle)
				print 'writing particle: ' + str(count)
				outfile.write(line)
		else:
			outfile.write(line)

def main():
	parser = argparse.ArgumentParser()
	parser.add_argument('files', metavar='fileName', type=str, nargs='+', help='input and output file names')
	parser.add_argument('--clean', action='store_true', help='only preserve particles with different image names')
	args = parser.parse_args()
	if not args.clean:
		unique(args.files[0], args.files[1], 0)
	else:
		unique(args.files[0], args.files[1], 1)

if __name__ == '__main__':
	main()
